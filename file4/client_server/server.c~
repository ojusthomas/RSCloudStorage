
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
#include<string.h>

int main(){
  int welcomeSocket, newSocket;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  struct sockaddr_storage serverStorage;
  socklen_t addr_size;

  welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);
  
  
  serverAddr.sin_family = AF_INET;  
  serverAddr.sin_port = htons(7891);  
  serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");  
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);  

int enable = 1;
if (setsockopt(welcomeSocket, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int)) < 0)
    error("setsockopt(SO_REUSEADDR) failed");

  bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

 
  if(listen(welcomeSocket,5)==0)
    printf("Listening\n");
  else
    printf("Error\n");

  
  addr_size = sizeof serverStorage;
  newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);

	FILE *fp;
	int bytes_read;
	fp=fopen("sup.txt","r");

	 bytes_read = fread(buffer, sizeof(char),sizeof(buffer), fp);
		printf("\nFile content :\n %s",buffer);
	 send(newSocket,buffer,strlen(buffer),0);
	

	remove("sup.txt");

/* Time to send the file 
FILE *fp;
unsigned long fsize;

fp = fopen("sup.txt", "r");

while (1) 
{
    // Read data into buffer.  We may not have enough to fill up buffer, so we
    // store how many bytes were actually read in bytes_read.
    int bytes_read = fread(buffer, sizeof(char),sizeof(buffer), fp);
    if (bytes_read == 0) // We're done reading from the file
        break;

    /*if (bytes_read < 0) 
    {
        error("ERROR reading from file"); 
    }

    // You need a loop for the write, because not all of the data may be written
    // in one call; write will return how many bytes were written. p keeps
    // track of where in the buffer we are, while we decrement bytes_read
    // to keep track of how many bytes are left to write.
    void *p = buffer;
    while (bytes_read > 0) 
    {
        int bytes_written = write(newSocket, buffer, bytes_read);
        if (bytes_written <= 0) 
        {
            error("ERROR writing to socket\n");
        }
        bytes_read -= bytes_written;
        p += bytes_written;
    }
}       

printf("Done Sending the File!\n");
printf("Now Closing Connection.\n");

fclose(fp);
close(newSocket);*/



  
  //strcpy(buffer,"Hello World\n");
  //send(newSocket,buffer,13,0);


 return 0;
}

